import os
from datetime import datetime, timedelta
import pytz
from telegram import Bot
from telegram.constants import ParseMode
import asyncio

# –í–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —É BotFather
TOKEN = ''
CHANNEL_ID = ''
MESSAGE_ID = 12345

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)
MSK = pytz.timezone('Europe/Moscow')

# –ü–µ—Ä–µ–≤–æ–¥ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
DAYS_IN_RUSSIAN = {
    "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
    "Wednesday": "–°—Ä–µ–¥–∞",
    "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
    "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
    "Saturday": "–°—É–±–±–æ—Ç–∞",
    "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
}
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def get_schedule_file(current_time):
    day_of_week = current_time.weekday()  # –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (0=–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6=–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
    hour = current_time.hour

    # –ü–æ—Å–ª–µ 18:00 –≤—ã–¥–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
    if hour >= 18:
        # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è —Å—É–±–±–æ—Ç–∞, –≤—ã–¥–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        if day_of_week == 5:  # –°—É–±–±–æ—Ç–∞
            return "monday.txt"
        # –ï—Å–ª–∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        elif day_of_week == 6:  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
            return None
        else:
            files = ["monday.txt", "tuesday.txt", "wednesday.txt", "thursday.txt", "friday.txt", "saturday.txt"]
            return files[(day_of_week + 1) % 7]
    else:
        # –î–æ 18:00 –≤—ã–¥–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
        files = ["monday.txt", "tuesday.txt", "wednesday.txt", "thursday.txt", "friday.txt", "saturday.txt"]
        return files[day_of_week]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞
def read_schedule(file_name):
    if not os.path.exists(file_name):
        return None

    with open(file_name, "r", encoding="utf-8") as file:
        lines = file.readlines()

    schedule = []
    current_subject = {}

    for line in lines:
        line = line.strip()
        if line.isdigit():  # –ù–æ–º–µ—Ä –ø–∞—Ä—ã
            if current_subject:
                schedule.append(current_subject)
            current_subject = {"number": line}
        elif "number" in current_subject and "name" not in current_subject:
            current_subject["name"] = line
        elif "name" in current_subject and "time" not in current_subject:
            current_subject["time"] = line
        elif "time" in current_subject and "place" not in current_subject:
            current_subject["place"] = line
        elif "place" in current_subject and "teacher" not in current_subject:
            current_subject["teacher"] = line

    if current_subject:
        schedule.append(current_subject)

    return schedule

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
def format_message(schedule, target_date):
    day_name_en = target_date.strftime("%A")  # –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º)
    day_name_ru = DAYS_IN_RUSSIAN.get(day_name_en, day_name_en)  # –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
    date_str = target_date.strftime("%d.%m.%Y")  # –î–∞—Ç–∞

    message = f"üéì **–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {date_str} ({day_name_ru}):**\n\n"

    for subject in schedule:
        message += (
            f"**{subject['number']}. {subject['name']}**\n"
            f"    _–ù–∞—á–∞–ª–æ:_ {subject['time']}\n"
            f"    _–ú–µ—Å—Ç–æ:_ {subject['place']}\n"
            f"    _–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:_ {subject['teacher']}\n\n"
        )

    message += "#—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ #–∞–∫—Ç—É–∞–ª—å–Ω–æ–µ—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
    return message

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
async def update_schedule():
    now = datetime.now(MSK)
    schedule_file = get_schedule_file(now)
    if not schedule_file:
        print("–°–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, –Ω–∏—á–µ–≥–æ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º.")
        return

    schedule = read_schedule(schedule_file)
    if not schedule:
        print(f"–§–∞–π–ª {schedule_file} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    target_date = now + timedelta(days=1) if now.hour >= 18 else now
    message = format_message(schedule, target_date)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
    bot = Bot(token=TOKEN)
    await bot.edit_message_text(chat_id=CHANNEL_ID, message_id=MESSAGE_ID, text=message, parse_mode=ParseMode.HTML)
    print(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å ID {MESSAGE_ID} –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")

# –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
if __name__ == "__main__":
    asyncio.run(update_schedule())
